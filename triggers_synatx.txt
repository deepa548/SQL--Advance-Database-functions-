***functions****

CREATE OR REPLACE FUNCTION get_salary (p_empid IN hr_employees.employee_id%TYPE) 
RETURN NUMBER IS 
v_sal hr_employees.salary%TYPE := 0; 
BEGIN 
SELECT salary 
INTO v_sal 
FROM hr_employees 
WHERE employee_id = p_empid;
 RETURN v_sal; 
END get_salary;


****calculating salary***

CREATE OR REPLACE FUNCTION calc_yearly_sal 
(p_empid IN hr_employees.employee_id%TYPE) 
RETURN NUMBER IS v_sal hr_employees.salary%TYPE := 0; 
v_job_ID hr_employees.job_id%TYPE;
 v_comm hr_employees.commission_pct%TYPE;
BEGIN
SELECT salary , job_id , commission_pct 
INTO v_sal, v_job_id, v_comm FROM hr_employees 
WHERE employee_id = p_empid;
 if 
(v_job_id = 'SA_REP') then v_sal := (v_sal*12 + v_sal * v_comm ) + 7000; 
else 
v_sal := v_sal*12 + 5000;
 end if; 
RETURN v_sal;
END calc_yearly_sal;


****calc sal***
1st way of using functions 
select calc_yearly_sal( 171) from dual


 2nd way. list everybody laname, fname, salary and yearlysal
 select employee_id, last_name, first_name, salary, job_id, yearly_sal_cal( employee_id)
 from hr_employees 

3rd way list only the employees who are earning yearly salary > 125,000
 SELECT employee_id, first_name, last_name, salary, job_id, yearly_sal_cal(employee_id) 
 FROM hr_employees
 WHERE yearly_sal_cal(employee_id) > 125000;

4th way we have clone copy version of Hr_emp table called backup_employee ,find all the employees (in backup_employees) who are earning less than 100,000 per year (based on calculation) and change their monthly salary by adding 3000 more

CREATE TABLE backup_employees
 as 
SELECT * from hr_employees; 
 UPDATE backup_employees 
SET salary = salary +3000 
WHERE yearly_sal_cal(employee_id) < 100000;


5th way EXECUTE dbms_output.put_line(yearly_sal_cal(183))


****update***
update backup_employees 
set salary = salary + 3000 
where calc_yearly_sal(employee_id) < 100000;


delete from backup_employees 
where
 calc_yearly_sal(employee_id) > 100000;

***function****

1) SELECT func_test (p_parameter_5 => 10) FROM DUAL; yes 21 
2) SELECT func_test from dual yes 11 3) 
  SELECT func_test (p_parameter_1 => 7) from dual yes 7+ 5*2 =17
 4) SELECT func_test (p_parameter_5 => 6 , p_parameter_1 => 5) from dual 5+ 6*2=17


***create customercredits table***
CREATE TABLE customerscredit AS select customer#, 0 as balance , 0 as credit from customers;
 update customerscredit 
set credit = 25000
 WHERE customer# between 1001 and 1008;
 update customerscredit set credit = 52000 
WHERE customer# between 1009 and 1015;
update customerscredit set credit = 14000
 WHERE customer# between 1016 and 1020;


****triggers***

CREATE OR REPLACE TRIGGER secure_emp
BEFORE INSERT ON hr_employees
BEGIN
IF (TO_CHAR(SYSDATE,'DY') IN ('SAT','SUN')) OR
(TO_CHAR(SYSDATE,'HH24:MI') NOT BETWEEN '08:00' AND '18:00') THEN
RAISE_APPLICATION_ERROR(-20500, 'You may insert'
 ||' into EMPLOYEES table only during ' 
 ||' normal business hours.');
END IF;
END;


***multiple conditions****


CREATE OR REPLACE TRIGGER secure_emp BEFORE
INSERT OR UPDATE OR DELETE ON hr_employees
BEGIN
IF (TO_CHAR(SYSDATE,'DY') IN ('SAT','SUN')) OR
(TO_CHAR(SYSDATE,'HH24')
NOT BETWEEN '08' AND '18') THEN
IF DELETING THEN RAISE_APPLICATION_ERROR(
-20502,'You may delete from EMPLOYEES table'||
'only during normal business hours.');
ELSIF INSERTING THEN RAISE_APPLICATION_ERROR(
-20500,'You may insert into EMPLOYEES table'||
'only during normal business hours.');
ELSIF UPDATING ('SALARY') THEN
RAISE_APPLICATION_ERROR(-20503, 'You may '||
 'update SALARY only normal during business hours.');
ELSE RAISE_APPLICATION_ERROR(-20504,'You may'||
' update EMPLOYEES table only during'||
' normal business hours.');
END IF;
END IF;
END;


***test***

UPDATE employees
SET salary = 15500
WHERE last_name = 'Russell';

******


CREATE TABLE audit_emp (
user_name VARCHAR2(30),
time_stamp date,
old_employee_id NUMBER(6),
new_employee_id NUMBER(6),
old_last_name VARCHAR2(25) NULL,
new_last_name VARCHAR2(25) NULL,
old_title VARCHAR2(10) NULL,
new_title VARCHAR2(10) NULL,
old_salary NUMBER(8,2) NULL,
new_salary NUMBER(8,2) NULL )


**

CREATE OR REPLACE TRIGGER audit_emp_values
AFTER DELETE OR INSERT OR UPDATE ON hr_employees
FOR EACH ROW
BEGIN
INSERT INTO audit_emp (user_name, time_stamp, old_employee_id,new_employee_id,
old_last_name, new_last_name, old_title,
new_title, old_salary, new_salary)
VALUES (USER, SYSDATE, :OLD.employee_id,:NEW.employee_id,
:OLD.last_name, :NEW.last_name, :OLD.job_id,
:NEW.job_id, :OLD.salary, :NEW.salary);
END;


create table hr_retired_employees
(
employee_id number(7) Primary Key,
first_name varchar(50),
last_name varchar(50),
salary number(9,2),
department_id number(4)
)

How to test

delete hr_employees where employee_id=168 --1 row
test2:
delete hr_employees where employee_id in (173, 174) --2 rows

alter table hr_employees add status char(20)
if you complete trigger

then test it with this code

update hr_employees
set status='RETIRED'
WHERE employee_id=136


ANSWER CODE:

Trigger Code

CREATE OR REPLACE TRIGGER retirement_automation
AFTER UPDATE of STATUS ON hr_employees
FOR EACH ROW
BEGIN
INSERT INTO hr_retired_employees (employee_id, first_name, last_name, salary, department_id)
VALUES ( :OLD.employee_id,:OLD.first_name, :OLD.last_name, :OLD.salary, :OLD.department_id);
END;
















